name: Build

on:
  push:
    branches:
      - "main"
      - "alpha"
      - "beta"
  pull_request:

jobs:
  build:
    name: Build
    runs-on: windows-2025
    concurrency:
      group: ukcp-build-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout Code and Submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Ensure VC++ 2010 Redistributables (x86 + x64)
      - name: Install VC++ 2010 Redistributables (x86 and x64)
        run: |
          choco install vcredist2010 --yes
          choco install vcredist2010 --x86 --yes

      - name: Set up Visual Studio Shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x86

      - name: Check Clang Version
        run: clang-cl --version

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      # Cache cURL build to speed up CI
      - name: Cache cURL
        id: cache-curl
        uses: actions/cache@v4
        with:
          path: "C:\\hostedtoolcache\\windows\\libcurl"
          key: "ukcp-curl-build"

      - name: Download and Build cURL
        if: steps.cache-curl.outputs.cache-hit != 'true'
        env:
          CURL_DOWNLOAD_URL: "https://github.com/curl/curl/releases/download/curl-7_76_1/curl-7.76.1.zip"
          CURL_VERSION: 7.76.1
        run: |
          New-Item -Path "C:\\hostedtoolcache\\windows" -Name "libcurl" -ItemType "directory"
          $WebClient = New-Object System.Net.WebClient
          $WebClient.DownloadFile(${env:CURL_DOWNLOAD_URL}, "C:\\hostedtoolcache\\windows\\libcurl\\curl.zip")
          Set-Location -Path "C:\\hostedtoolcache\\windows\\libcurl"
          7z x curl.zip
          Remove-Item curl.zip
          Set-Location -Path "C:\\hostedtoolcache\\windows\\libcurl\\curl-${env:CURL_VERSION}\\winbuild"
          nmake /f Makefile.vc mode=static ENABLE_SCHANNEL=yes

      - name: Setup cURL Environment
        env:
          CURL_VERSION: 7.76.1
        run: |
          echo "CURL_INCLUDEDIR=C:\\hostedtoolcache\\windows\\libcurl\\curl-${env:CURL_VERSION}\\builds\\libcurl-vc-x86-release-static-ipv6-sspi-schannel\\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CURL_LIBRARYDIR=C:\\hostedtoolcache\\windows\\libcurl\\curl-${env:CURL_VERSION}\\builds\\libcurl-vc-x86-release-static-ipv6-sspi-schannel\\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Setup Yarn + caches
      - name: Setup Yarn
        uses: actions/setup-node@v4
        with:
          node-version: "16"

      - name: Get Yarn Cache Directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Load Yarn Cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Load Cached Node Modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Assets
        run: yarn

      - name: Setup Build Version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: .\\.github\\workflows\\plugin_version.ps1

      - name: Run CMake
        env:
          CC: clang-cl
          CFLAGS: -m32
          CXX: clang-cl
          CXXFLAGS: -m32
        run: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja -Bbuild

      - name: Run Ninja Build
        working-directory: build
        run: ninja

      - name: Run Tests
        working-directory: build
        run: |
          ctest --output-on-failure --no-tests=error

      # Upload artifacts
      - name: Upload Core Binary As Artifact
        uses: actions/upload-artifact@v4
        with:
          name: UKControllerPluginCore.dll
          path: ".\\build\\bin\\UKControllerPluginCore.dll"

      - name: Upload Updater Binary As Artifact
        uses: actions/upload-artifact@v4
        with:
          name: UKControllerPluginUpdater.dll
          path: ".\\build\\bin\\UKControllerPluginUpdater.dll"

      - name: Upload Loader Binary As Artifact
        uses: actions/upload-artifact@v4
        with:
          name: UKControllerPlugin.dll
          path: ".\\build\\bin\\UKControllerPlugin.dll"

      - name: Upload Build Tree
        uses: actions/upload-artifact@v4
        with:
          name: ukcp-build-tree-native
          path: build

  # ----------- LINUX CROSS-BUILD TO WINDOWS (Win32, static libcurl) -----------
  linux-cross:
    name: Linux Cross-Build (Win32 via llvm-mingw)
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/mstorsjo/llvm-mingw:latest
    steps:
      - name: Install host tools
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            ca-certificates curl git cmake ninja-build unzip
      - name: Checkout Code and Submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build libcurl (static)
        env:
          CURL_VERSION: 7.76.1
        run: |
          set -eux
          curl -L "https://github.com/curl/curl/releases/download/curl-7_76_1/curl-7.76.1.zip" -o curl.zip
          unzip -q curl.zip
          rm curl.zip
          mv curl-7.76.1 curl-src
          cmake -S curl-src -B curl-build -G Ninja \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_C_COMPILER=i686-w64-mingw32-clang \
            -DCMAKE_CXX_COMPILER=i686-w64-mingw32-clang++ \
            -DCMAKE_RC_COMPILER=i686-w64-mingw32-windres \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_CURL_EXE=OFF \
            -DBUILD_TESTING=OFF
          cmake --build curl-build --parallel
          echo "CURL_INCLUDEDIR=$GITHUB_WORKSPACE/curl-src/include" >> $GITHUB_ENV
          echo "CURL_LIBRARYDIR=$GITHUB_WORKSPACE/curl-build/lib"   >> $GITHUB_ENV

      - name: Configure Project (Win32)
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_C_COMPILER=i686-w64-mingw32-clang \
            -DCMAKE_CXX_COMPILER=i686-w64-mingw32-clang++ \
            -DCMAKE_RC_COMPILER=i686-w64-mingw32-windres \
            -DCMAKE_CXX_STANDARD=20 \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON \
            -DCMAKE_CXX_EXTENSIONS=OFF \
            -DCURL_INCLUDEDIR="${CURL_INCLUDEDIR}" \
            -DCURL_LIBDIR="${CURL_LIBRARYDIR}" \
            -DCURL_LIBRARYDIR="${CURL_LIBRARYDIR}" \
            -DBUILD_TESTING=ON

      - name: Build (Ninja)
        run: cmake --build build --parallel

      - name: Upload Cross Build Tree
        uses: actions/upload-artifact@v4
        with:
          name: ukcp-build-tree-cross
          path: build

  # ----------- WINDOWS TESTS ON CROSS BUILD -----------
  windows-cross-tests:
    name: Windows Tests (Cross-Built)
    runs-on: windows-2025
    needs: [ linux-cross ]
    steps:
      - name: Install VC++ 2010 Redistributables
        run: |
          choco install vcredist2010 --yes
          choco install vcredist2010 --x86 --yes

      - name: Download Cross Build Tree
        uses: actions/download-artifact@v4
        with:
          name: ukcp-build-tree-cross
          path: build

      - name: Run Tests (ctest)
        working-directory: build
        run: |
          ctest --output-on-failure --no-tests=error

  format:
    name: Format
    runs-on: windows-latest
    concurrency:
      group: ukcp-format-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check Clang Version
        run: clang-cl --version

      - name: Get All Changed Files
        id: changed-files
        uses: Ana06/get-changed-files@v2.3.0
        with:
          filter: |
            src/**/*.cpp
            src/**/*.h
            test/**/*.cpp
            test/**/*.h

      - name: Clang Format
        run: |
          if (-not ([string]::IsNullOrEmpty("${{ steps.changed-files.outputs.added_modified }}"))) {
            clang-format --style=file --dry-run -Werror ${{ steps.changed-files.outputs.added_modified }}
          }

  # ----------- RELEASE -----------
  release:
    name: Release
    runs-on: windows-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/alpha')
    needs: [ build, linux-cross, windows-cross-tests, format ]
    concurrency:
      group: ukcp-release
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Yarn
        uses: actions/setup-node@v4
        with:
          node-version: "16"

      - name: Get Yarn Cache Directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Load Yarn Cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Load Cached Node Modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Assets
        run: yarn

      - name: Download Core Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPluginCore.dll
          path: ".\\build\\bin\\UKControllerPluginCore.dll"

      - name: Download Updater Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPluginUpdater.dll
          path: ".\\build\\bin\\UKControllerPluginUpdater.dll"

      - name: Download Loader Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPlugin.dll
          path: ".\\build\\bin\\UKControllerPlugin.dll"

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          yarn semantic-release
