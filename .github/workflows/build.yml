name: Build

on:
  push:
    branches: ["main", "alpha", "beta"]
  pull_request:

jobs:
  # ----------- LINUX CROSS-BUILD TO WINDOWS (Win32 via xwin + clang-cl) -----------
  linux-cross:
    name: Linux Cross-Build (xwin + clang-cl, matches Dockerfile)
    runs-on: ubuntu-24.04
    env:
      CURL_VERSION: 7.62.0
      LLVM_VERSION: 18
      XWIN_VERSION: 0.6.5
      XWIN_TRIPLE: x86_64-unknown-linux-musl
      WINDOWS_CRT_VERSION: 14.29.16.11
      WINDOWS_SDK_VERSION: 10.0.20348
      TOOLCHAIN: /opt/xwin/bin/xwin.cmake

    steps:
      - name: Install host tools
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            ca-certificates curl git cmake ninja-build unzip xz-utils build-essential \
            clang-18 clang-tools-18 lld-18 llvm-18 llvm-18-tools perl

      - name: Checkout repo (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache xwin downloads
        uses: actions/cache@v4
        with:
          path: ~/.xwin-cache
          key: xwin-cache-${{ env.XWIN_VERSION }}-crt${{ env.WINDOWS_CRT_VERSION }}-sdk${{ env.WINDOWS_SDK_VERSION }}

      - name: Install xwin (official tar.gz)
        run: |
          set -eux
          if ! command -v xwin >/dev/null 2>&1; then
            curl -L --fail \
              "https://github.com/Jake-Shadle/xwin/releases/download/${XWIN_VERSION}/xwin-${XWIN_VERSION}-${XWIN_TRIPLE}.tar.gz" \
              -o /tmp/xwin.tar.gz
            mkdir -p /tmp/xwin-extract
            tar -xzf /tmp/xwin.tar.gz -C /tmp/xwin-extract
            sudo mv /tmp/xwin-extract/xwin-*/xwin /usr/local/bin/xwin
            sudo chmod +x /usr/local/bin/xwin
            rm -rf /tmp/xwin.tar.gz /tmp/xwin-extract
          fi
          xwin --version

      - name: Splat CRT/SDK into /opt/xwin (exact versions)
        run: |
          set -eux
          if [ ! -d /opt/xwin ]; then
            xwin --accept-license --arch x86 \
              --crt-version "${WINDOWS_CRT_VERSION}" \
              --sdk-version "${WINDOWS_SDK_VERSION}" \
              splat --output /opt/xwin --include-debug-libs
          fi
          test -d /opt/xwin/crt/include
          test -d /opt/xwin/sdk/include/um

      - name: Build case-insensitive shim and wrappers (cc/lib/link/rc)
        run: |
          set -eux
          mkdir -p /opt/xwin/bin
          # libinsensitive.so
          curl -L --fail \
            "https://gist.githubusercontent.com/19wintersp/084cd0d4810a25c11559107491525655/raw/31fce25c66837af5538857f1624ff7acb409d7a9/insensitive.c" \
            -o /tmp/insensitive.c
          cc -O0 -std=c2x -fPIC -shared -o /opt/xwin/bin/libinsensitive.so /tmp/insensitive.c

          # cc wrapper (clang-cl-18)
          cat > /opt/xwin/bin/cc <<'EOF'
          #!/usr/bin/env bash
          set -e
          export LD_PRELOAD=/opt/xwin/bin/libinsensitive.so
          exec clang-cl-18 \
            -Wno-microsoft --target=i686-pc-windows-msvc /EHa /arch:SSE \
            /imsvc /opt/xwin/crt/include \
            /imsvc /opt/xwin/sdk/include/shared \
            /imsvc /opt/xwin/sdk/include/ucrt \
            /imsvc /opt/xwin/sdk/include/um \
            "$@"
          EOF

          # lib wrapper
          cat > /opt/xwin/bin/lib <<'EOF'
          #!/usr/bin/env bash
          set -e
          exec lld-link-18 /lib \
            /libpath:/opt/xwin/crt/lib/x86 \
            /libpath:/opt/xwin/sdk/lib/shared/x86 \
            /libpath:/opt/xwin/sdk/lib/ucrt/x86 \
            /libpath:/opt/xwin/sdk/lib/um/x86 \
            "$@"
          EOF

          # link wrapper
          cat > /opt/xwin/bin/link <<'EOF'
          #!/usr/bin/env bash
          set -e
          export LD_PRELOAD=/opt/xwin/bin/libinsensitive.so
          exec lld-link-18 \
            /libpath:/opt/xwin/crt/lib/x86 \
            /libpath:/opt/xwin/sdk/lib/shared/x86 \
            /libpath:/opt/xwin/sdk/lib/ucrt/x86 \
            /libpath:/opt/xwin/sdk/lib/um/x86 \
            "$@"
          EOF

          # rc wrapper
          cat > /opt/xwin/bin/rc <<'EOF'
          #!/usr/bin/env bash
          set -e
          export LD_PRELOAD=/opt/xwin/bin/libinsensitive.so
          exec llvm-rc-18 \
            /I /opt/xwin/crt/include \
            /I /opt/xwin/sdk/include/shared \
            /I /opt/xwin/sdk/include/ucrt \
            /I /opt/xwin/sdk/include/um \
            "$@"
          EOF

          MT_BIN="$(command -v llvm-mt-18 || true)"
          if [ -n "$MT_BIN" ]; then ln -sf "$MT_BIN" /opt/xwin/bin/mt; fi
          chmod +x /opt/xwin/bin/cc /opt/xwin/bin/lib /opt/xwin/bin/link /opt/xwin/bin/rc

          # CMake toolchain file
          cat > /opt/xwin/bin/xwin.cmake <<'EOF'
          set(CMAKE_SYSTEM_NAME Windows)
          set(CMAKE_AR           "/opt/xwin/bin/lib")
          set(CMAKE_C_COMPILER   "/opt/xwin/bin/cc")
          set(CMAKE_CXX_COMPILER "/opt/xwin/bin/cc")
          set(CMAKE_LINKER       "/opt/xwin/bin/link")
          set(CMAKE_MT           "/opt/xwin/bin/mt")
          set(CMAKE_RC_COMPILER  "/opt/xwin/bin/rc")
          EOF

      # ---- Build libcurl (static) from official tarball ----
      - name: Cache curl source
        id: cache-curl-src
        uses: actions/cache@v4
        with:
          path: /opt/curl-src
          key: curl-src-${{ env.CURL_VERSION }}

      - name: Download curl source (if needed)
        if: steps.cache-curl-src.outputs.cache-hit != 'true'
        run: |
          set -eux
          mkdir -p /opt/curl-src
          curl -L --fail "https://curl.se/download/curl-${CURL_VERSION}.tar.gz" -o /tmp/curl.tar.gz
          tar -xzf /tmp/curl.tar.gz -C /opt/curl-src --strip-components=1
          rm -f /tmp/curl.tar.gz

      - name: Patch curl .rc for llvm-rc (© → (c))
        run: |
          set -eux
          sed -i 's/\\xa9/(c)/g' /opt/curl-src/lib/libcurl.rc /opt/curl-src/src/curl.rc || true
          perl -0777 -pe 's/\xC2\xA9/(c)/g' -i /opt/curl-src/lib/libcurl.rc /opt/curl-src/src/curl.rc || true

      - name: Configure & Build libcurl (static)
        run: |
          set -eux
          cmake -S /opt/curl-src -B /opt/curl-build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE="${TOOLCHAIN}" \
            -DBUILD_CURL_EXE=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTING=OFF \
            -DCURL_CA_PATH=none -DCURL_USE_LIBPSL=OFF
          cmake --build /opt/curl-build --parallel
          cd /opt/curl-build/lib
          if [ -f libcurl_imp.lib ]; then
            cp -f libcurl_imp.lib libcurl_a.lib
            cp -f libcurl_imp.lib libcurl_a_debug.lib
          fi

      - name: Export curl paths for later steps
        run: |
          echo "CURL_INCLUDEDIR=/opt/curl-src/include" >> $GITHUB_ENV
          echo "CURL_LIBRARYDIR=/opt/curl-build/lib"   >> $GITHUB_ENV
          echo "CURL_DEBUG_LIBRARYDIR=/opt/curl-build/lib" >> $GITHUB_ENV

      # ---- Configure & Build your repo with the xwin toolchain ----
      - name: Configure project (Win32, Ninja, static curl)
        run: |
          set -eux
          cmake -S . -B build -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="${TOOLCHAIN}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_STANDARD=20 \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON \
            -DCMAKE_CXX_EXTENSIONS=OFF \
            -DCURL_INCLUDEDIR="${CURL_INCLUDEDIR}" \
            -DCURL_LIBDIR="${CURL_LIBRARYDIR}" \
            -DCURL_LIBRARYDIR="${CURL_LIBRARYDIR}" \
            -DBUILD_TESTING=ON

      - name: Build (Ninja)
        run: cmake --build build --parallel

      - name: Ensure EuroScope shim next to test EXEs
        run: |
          if [ -f build/src/plugin/bin/EuroScopePlugInDll.dll ] && [ -d build/bin ]; then
            cp -f build/src/plugin/bin/EuroScopePlugInDll.dll build/bin/ || true
          fi

      - name: Upload Cross Build Tree
        uses: actions/upload-artifact@v4
        with:
          name: ukcp-build-tree-cross
          path: build

      # Upload the three DLLs as separate artifacts (exact names)
      - name: Upload Core Binary As Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: UKControllerPluginCore.dll
          path: build/bin/UKControllerPluginCore.dll

      - name: Upload Updater Binary As Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: UKControllerPluginUpdater.dll
          path: build/bin/UKControllerPluginUpdater.dll

      - name: Upload Loader Binary As Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: UKControllerPlugin.dll
          path: build/bin/UKControllerPlugin.dll

  # ----------- WINDOWS TESTS ON CROSS BUILD -----------
  windows-cross-tests:
    name: Windows Tests (Cross-Built)
    runs-on: windows-2025
    needs: [ linux-cross ]
    steps:
      - name: Install VC++ 2010 Redistributables (x86 + x64)
        run: |
          choco install vcredist2010 --yes
          choco install vcredist2010 --x86 --yes

      - name: Download Cross Build Tree
        uses: actions/download-artifact@v4
        with:
          name: ukcp-build-tree-cross
          path: ukcp-build-tree-cross

      - name: Move build tree into place
        run: |
          if not exist build mkdir build
          robocopy ukcp-build-tree-cross build /E || exit /B 0

      - name: Run Tests (ctest)
        working-directory: build
        run: |
          ctest --output-on-failure --no-tests=error

  # ----------- FORMAT ONLY -----------
  format:
    name: Format
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check Clang Version
        run: clang-cl --version

      - name: Get All Changed Files
        id: changed-files
        uses: Ana06/get-changed-files@v2.3.0
        with:
          filter: |
            src/**/*.cpp
            src/**/*.h
            test/**/*.cpp
            test/**/*.h

      - name: Clang Format
        run: |
          if (-not ([string]::IsNullOrEmpty("${{ steps.changed-files.outputs.added_modified }}"))) {
            clang-format --style=file --dry-run -Werror ${{ steps.changed-files.outputs.added_modified }}
          }

  # ----------- RELEASE -----------
  release:
    name: Release
    runs-on: windows-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/alpha')
    needs: [ linux-cross, windows-cross-tests, format ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Yarn
        uses: actions/setup-node@v4
        with:
          node-version: "16"

      - name: Get Yarn Cache Directory
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Load Yarn Cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Load Cached Node Modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Assets
        run: yarn

      # Download the three DLLs individually (same artifact names as upload)
      - name: Download Core Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPluginCore.dll
          path: .\build\bin

      - name: Download Updater Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPluginUpdater.dll
          path: .\build\bin

      - name: Download Loader Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPlugin.dll
          path: .\build\bin

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          yarn semantic-release
