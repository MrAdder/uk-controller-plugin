name: Build

on:
  push:
    branches:
      - "main"
      - "alpha"
      - "beta"
  pull_request:

jobs:
  # ----------- LINUX CROSS-BUILD TO WINDOWS (Win32, static libcurl) -----------
  linux-cross:
    name: Linux Cross-Build (Win32 via llvm-mingw, no Docker)
    runs-on: ubuntu-24.04
    env:
      LLVM_MINGW_VERSION: 20240619
      LLVM_MINGW_ARCHIVE: llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64.tar.xz
      LLVM_MINGW_URL: https://github.com/mstorsjo/llvm-mingw/releases/download/20240619/llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64.tar.xz
      CURL_VERSION: 7.76.1

    steps:
      - name: Install host tools
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            ca-certificates curl git cmake ninja-build unzip xz-utils

      - name: Checkout Code and Submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Cache the llvm-mingw toolchain archive & extracted folder
      - name: Cache llvm-mingw archive
        id: cache-llvm-archive
        uses: actions/cache@v4
        with:
          path: ${{ env.HOME }}/.cache/llvm-mingw/${{ env.LLVM_MINGW_ARCHIVE }}
          key: llvm-mingw-archive-${{ env.LLVM_MINGW_VERSION }}

      - name: Download llvm-mingw archive (if needed)
        if: steps.cache-llvm-archive.outputs.cache-hit != 'true'
        run: |
          mkdir -p "$HOME/.cache/llvm-mingw"
          curl -L "${LLVM_MINGW_URL}" -o "$HOME/.cache/llvm-mingw/${LLVM_MINGW_ARCHIVE}"

      - name: Cache llvm-mingw extracted
        id: cache-llvm-extract
        uses: actions/cache@v4
        with:
          path: /opt/llvm-mingw
          key: llvm-mingw-extract-${{ env.LLVM_MINGW_VERSION }}

      - name: Extract llvm-mingw (if needed)
        if: steps.cache-llvm-extract.outputs.cache-hit != 'true'
        run: |
          sudo mkdir -p /opt/llvm-mingw
          sudo tar -xJf "$HOME/.cache/llvm-mingw/${LLVM_MINGW_ARCHIVE}" -C /opt/llvm-mingw --strip-components=1
          ls -l /opt/llvm-mingw/bin

      - name: Add llvm-mingw to PATH
        run: echo "/opt/llvm-mingw/bin" >> $GITHUB_PATH

      # Cache curl source & build
      - name: Cache curl source
        id: cache-curl-src
        uses: actions/cache@v4
        with:
          path: curl-src
          key: curl-src-${{ env.CURL_VERSION }}

      - name: Download curl source (if needed)
        if: steps.cache-curl-src.outputs.cache-hit != 'true'
        run: |
          curl -L "https://github.com/curl/curl/releases/download/curl-7_76_1/curl-7.76.1.zip" -o curl.zip
          unzip -q curl.zip
          rm curl.zip
          mv curl-7.76.1 curl-src

      - name: Patch curl .rc for llvm-rc (© → (c))
        run: |
          set -e
          # replace literal ©
          sed -i 's/©/(c)/g' curl-src/lib/libcurl.rc curl-src/src/curl.rc || true
          # replace \xA9 escape if present
          sed -i 's/\\xa9/(c)/g' curl-src/lib/libcurl.rc curl-src/src/curl.rc || true
          # replace UTF-8 byte sequence as a fallback
          perl -0777 -pe 's/\xC2\xA9/(c)/g' -i curl-src/lib/libcurl.rc curl-src/src/curl.rc || true

      - name: Cache curl build (static i686)
        id: cache-curl-build
        uses: actions/cache@v4
        with:
          path: curl-build
          key: curl-build-i686-static-${{ env.CURL_VERSION }}

      - name: Build libcurl (static, i686)
        if: steps.cache-curl-build.outputs.cache-hit != 'true'
        run: |
          cmake -S curl-src -B curl-build -G Ninja \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_C_COMPILER=i686-w64-mingw32-clang \
            -DCMAKE_CXX_COMPILER=i686-w64-mingw32-clang++ \
            -DCMAKE_RC_COMPILER=llvm-rc \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_CURL_EXE=OFF \
            -DBUILD_TESTING=OFF
          cmake --build curl-build --parallel

      - name: Export curl paths for CMake
        run: |
          echo "CURL_INCLUDEDIR=$GITHUB_WORKSPACE/curl-src/include" >> $GITHUB_ENV
          echo "CURL_LIBRARYDIR=$GITHUB_WORKSPACE/curl-build/lib"   >> $GITHUB_ENV

      - name: Configure Project (Win32, Ninja, static curl)
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_C_COMPILER=i686-w64-mingw32-clang \
            -DCMAKE_CXX_COMPILER=i686-w64-mingw32-clang++ \
            -DCMAKE_RC_COMPILER=llvm-rc \
            -DCMAKE_CXX_STANDARD=20 \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON \
            -DCMAKE_CXX_EXTENSIONS=OFF \
            -DCURL_INCLUDEDIR="${CURL_INCLUDEDIR}" \
            -DCURL_LIBDIR="${CURL_LIBRARYDIR}" \
            -DCURL_LIBRARYDIR="${CURL_LIBRARYDIR}" \
            -DBUILD_TESTING=ON

      - name: Build (Ninja)
        run: cmake --build build --parallel

      - name: Ensure EuroScope shim next to test EXEs
        run: |
          if [ -f build/src/plugin/bin/EuroScopePlugInDll.dll ] && [ -d build/bin ]; then
            cp -f build/src/plugin/bin/EuroScopePlugInDll.dll build/bin/ || true
          fi

      - name: Upload Cross Build Tree
        uses: actions/upload-artifact@v4
        with:
          name: ukcp-build-tree-cross
          path: build

  # ----------- WINDOWS TESTS ON CROSS BUILD -----------
  windows-cross-tests:
    name: Windows Tests (Cross-Built)
    runs-on: windows-2025
    needs: [ linux-cross ]
    steps:
      - name: Install VC++ 2010 Redistributables
        run: |
          choco install vcredist2010 --yes
          choco install vcredist2010 --x86 --yes

      - name: Download Cross Build Tree
        uses: actions/download-artifact@v4
        with:
          name: ukcp-build-tree-cross
          path: ukcp-build-tree-cross

      - name: Move build tree into place
        run: |
          if not exist build mkdir build
          robocopy ukcp-build-tree-cross build /E || exit /B 0

      - name: Run Tests (ctest)
        working-directory: build
        run: |
          ctest --output-on-failure --no-tests=error

  format:
    name: Format
    runs-on: windows-latest
    concurrency:
      group: ukcp-format-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check Clang Version
        run: clang-cl --version

      - name: Get All Changed Files
        id: changed-files
        uses: Ana06/get-changed-files@v2.3.0
        with:
          filter: |
            src/**/*.cpp
            src/**/*.h
            test/**/*.cpp
            test/**/*.h

      - name: Clang Format
        run: |
          if (-not ([string]::IsNullOrEmpty("${{ steps.changed-files.outputs.added_modified }}"))) {
            clang-format --style=file --dry-run -Werror ${{ steps.changed-files.outputs.added_modified }}
          }

  # ----------- RELEASE -----------
  release:
    name: Release
    runs-on: windows-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/alpha')
    needs: [ build, linux-cross, windows-cross-tests, format ]
    concurrency:
      group: ukcp-release
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Yarn
        uses: actions/setup-node@v4
        with:
          node-version: "16"

      - name: Get Yarn Cache Directory
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Load Yarn Cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Load Cached Node Modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Assets
        run: yarn

      - name: Download Core Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPluginCore.dll
          path: ".\\build\\bin\\UKControllerPluginCore.dll"

      - name: Download Updater Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPluginUpdater.dll
        #  path is a directory, not a file path; keep default and move later if needed
      - name: Download Loader Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPlugin.dll

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          yarn semantic-release
