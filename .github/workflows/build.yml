name: Build

on:
  push:
    branches:
      - "main"
      - "alpha"
      - "beta"
  pull_request:

jobs:
  build:
    name: Build
    runs-on: windows-2025
    concurrency:
      group: ukcp-build-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout Code and Submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Environment things
      - name: Install VC++ 2010 Redistributables (x86 and x64)
        run: |
          choco install vcredist2010 --yes
          choco install vcredist2010 --x86 --yes

      - name: Set up Visual Studio Shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x86

      - name: Check Clang Version
        run: clang-cl --version

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      # cURL
      - name: Cache cURL
        id: cache-curl
        uses: actions/cache@v4
        with:
          path: "C:\\hostedtoolcache\\windows\\libcurl"
          key: "ukcp-curl-build"

      - name: Download and Build cURL
        if: steps.cache-curl.outputs.cache-hit != 'true'
        env:
          CURL_DOWNLOAD_URL: "https://github.com/curl/curl/releases/download/curl-7_76_1/curl-7.76.1.zip"
          CURL_VERSION: 7.76.1
        run: |
          New-Item -Path "C:\\hostedtoolcache\\windows" -Name "libcurl" -ItemType "directory"
          $WebClient = New-Object System.Net.WebClient
          $WebClient.DownloadFile(${env:CURL_DOWNLOAD_URL}, "C:\\hostedtoolcache\\windows\\libcurl\\curl.zip")
          Set-Location -Path "C:\\hostedtoolcache\\windows\\libcurl"
          7z x curl.zip
          Remove-Item curl.zip
          Set-Location -Path "C:\\hostedtoolcache\\windows\\libcurl\\curl-${env:CURL_VERSION}\\winbuild"
          nmake /f Makefile.vc mode=static ENABLE_SCHANNEL=yes

      - name: Setup cURL Environment
        env:
          CURL_VERSION: 7.76.1
        run: |
          echo "CURL_INCLUDEDIR=C:\\hostedtoolcache\\windows\\libcurl\\curl-${env:CURL_VERSION}\\builds\\libcurl-vc-x86-release-static-ipv6-sspi-schannel\\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CURL_LIBRARYDIR=C:\\hostedtoolcache\\windows\\libcurl\\curl-${env:CURL_VERSION}\\builds\\libcurl-vc-x86-release-static-ipv6-sspi-schannel\\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Setup all the yarn things and node modules
      - name: Setup Yarn
        uses: actions/setup-node@v4
        with:
          node-version: "16"

      - name: Get Yarn Cache Directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Load Yarn Cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Load Cached Node Modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      # Install yarn things
      - name: Install Assets
        run: yarn

      - name: Setup Build Version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: .\\.github\\workflows\\plugin_version.ps1

      - name: Run CMake
        env:
          CC: clang-cl
          CFLAGS: -m32
          CXX: clang-cl
          CXXFLAGS: -m32
        run: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja -Bbuild

      # Run the build and tests
      - name: Run Ninja Build
        working-directory: build
        run: ninja

      - name: Run Tests
        working-directory: build
        run: |
          ctest -C Release --output-on-failure --no-tests=error

      # Do Srclinting
      - name: Get Changed Files (Src)
        id: changed-files-src
        uses: Ana06/get-changed-files@v2.3.0
        with:
          filter: |
            src/**/*.cpp

      - name: Clang Tidy (Src)
        continue-on-error: true # Have to as clang-tidy doesnt want to run properly on Windows
        if: false
        run: |
          if (-not ([string]::IsNullOrEmpty("${{ steps.changed-files-src.outputs.added_modified }}"))) { clang-tidy ${{ steps.changed-files-src.outputs.added_modified }} -p build }

      # Upload artifacts (DLLs as before)
      - name: Upload Core Binary As Artifact
        uses: actions/upload-artifact@v4
        with:
          name: UKControllerPluginCore.dll
          path: ".\\build\\bin\\UKControllerPluginCore.dll"

      - name: Upload Updater Binary As Artifact
        uses: actions/upload-artifact@v4
        with:
          name: UKControllerPluginUpdater.dll
          path: ".\\build\\bin\\UKControllerPluginUpdater.dll"

      - name: Upload Loader Binary As Artifact
        uses: actions/upload-artifact@v4
        with:
          name: UKControllerPlugin.dll
          path: ".\\build\\bin\\UKControllerPlugin.dll"

      # NEW: Upload full build tree so another Windows job can re-run ctest before release
      - name: Upload Build Tree (for Windows tests before release)
        uses: actions/upload-artifact@v4
        with:
          name: ukcp-build-tree
          path: build

  # New: Linux build (assets + caches). This keeps CI parity and prepares any frontend assets on Ubuntu.
  linux-build:
    name: Linux Build (assets + cache)
    runs-on: ubuntu-24.04
    concurrency:
      group: ukcp-linux-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout Code and Submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node/Yarn
        uses: actions/setup-node@v4
        with:
          node-version: "16"

      - name: Get Yarn Cache Directory
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Load Yarn Cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: linux-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            linux-yarn-

      - name: Load Cached Node Modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: linux-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Assets (Linux)
        run: yarn --frozen-lockfile

      # If you later add Linux-friendly pieces (docs, static analysis) do them here

      - name: Upload Asset Bundle (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ukcp-linux-assets
          path: |
            **/package.json
            **/yarn.lock
            **/dist
          if-no-files-found: ignore

  # New: A dedicated Windows tests job that runs BEFORE release using artifacts from the 'build' job
  windows-tests:
    name: Windows Tests (from artifact)
    runs-on: windows-2025
    needs: [ build ]   # ensure we have a build tree to test
    concurrency:
      group: ukcp-win-tests-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Download Build Tree
        uses: actions/download-artifact@v4
        with:
          name: ukcp-build-tree
          path: build

      - name: Ensure EuroScope & GDI32 DLLs
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $root     = (Get-Location).Path
          $buildBin = Join-Path $root "build\bin"
          $plugBin  = Join-Path $root "build\src\plugin\bin"
          if (!(Test-Path $buildBin)) { New-Item -ItemType Directory -Force -Path $buildBin | Out-Null }

          # Copy EuroScope shim next to test EXEs if it exists
          $eusDll = Join-Path $plugBin "EuroScopePlugInDll.dll"
          if (Test-Path $eusDll) {
            Copy-Item $eusDll $buildBin -Force
            Write-Host "✅ Copied EuroScopePlugInDll.dll to $buildBin"
          } else {
            Write-Host "⚠️ EuroScopePlugInDll.dll not found in $plugBin — tests may fail"
          }

          # Ensure gdi32.dll is present locally for tests
          $gdiSource = "$env:WINDIR\System32\gdi32.dll"
          $gdiDest   = Join-Path $buildBin "gdi32.dll"
          if (Test-Path $gdiSource) {
            Copy-Item $gdiSource $gdiDest -Force
            Write-Host "✅ gdi32.dll copied to $buildBin"
          } else {
            throw "❌ gdi32.dll not found in System32 — cannot proceed"
          }

      - name: Run ctest (artifact build)
        working-directory: build
        run: |
          ctest -C Release --output-on-failure --no-tests=error

  format:
    name: Format
    runs-on: windows-latest
    concurrency:
      group: ukcp-format-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # Environment things
      - name: Check Clang Version
        run: clang-cl --version

      - name: Get All Changed Files
        id: changed-files
        uses: Ana06/get-changed-files@v2.3.0
        with:
          filter: |
            src/**/*.cpp
            src/**/*.h
            test/**/*.cpp
            test/**/*.h

      - name: Clang Format
        run: |
          if (-not ([string]::IsNullOrEmpty("${{ steps.changed-files.outputs.added_modified }}"))) { clang-format --style=file --dry-run -Werror ${{ steps.changed-files.outputs.added_modified }} }

  release:
    name: Release
    runs-on: windows-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/alpha')
    needs: [build, linux-build, windows-tests, format]
    concurrency:
      group: ukcp-release
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # Setup all the yarn things and node modules
      - name: Setup Yarn
        uses: actions/setup-node@v4
        with:
          node-version: "16"

      - name: Get Yarn Cache Directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Load Yarn Cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Load Cached Node Modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      # Install yarn things
      - name: Install Assets
        run: yarn

      # Download build artifacts
      - name: Download Core Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPluginCore.dll
          path: ".\\build\\bin\\UKControllerPluginCore.dll"

      - name: Download Updater Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPluginUpdater.dll
          path: ".\\build\\bin\\UKControllerPluginUpdater.dll"

      - name: Download Loader Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPlugin.dll
          path: ".\\build\\bin\\UKControllerPlugin.dll"

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          yarn semantic-release
