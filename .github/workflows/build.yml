name: Build (Cross • Format • Release)

on:
  push:
    branches:
      - "main"
      - "alpha"
      - "beta"
  pull_request:

jobs:
  # ----------- LINUX CROSS-BUILD TO WINDOWS (Win32, via xwin) -----------
  linux-cross:
    name: Linux Cross-Build (Win32 via xwin + clang/lld)
    runs-on: ubuntu-24.04
    env:
      # Pin an SDK version known to be available; omit CRT so xwin picks a compatible one.
      XWIN_SDK_VERSION: 10.0.22621.0
      CURL_VERSION: 7.76.1

    steps:
      - name: Install host tools
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            ca-certificates curl git cmake ninja-build unzip xz-utils llvm lld jq

      - name: Checkout Code and Submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache xwin cache and sysroot
        uses: actions/cache@v4
        with:
          path: |
            ~/.xwin-cache
            /opt/xwin
          key: xwin-${{ env.XWIN_SDK_VERSION }}

      - name: Install xwin SDK (if needed)
        env:
            XWIN_VERSION: 0.6.7                 # pin a known-good version
        run: |
          set -e
          if [ ! -d "/opt/xwin" ]; then
                URL="https://github.com/Jake-Shadle/xwin/releases/download/${XWIN_VERSION}/xwin-${XWIN_VERSION}-x86_64-unknown-linux-musl.tar.gz"
                echo "Downloading xwin from: $URL"
                curl -L --fail "$URL" -o /tmp/xwin.tar.gz
                # Extract and install the 'xwin' binary
                tar -xJf /tmp/xwin.tar.xz -C /tmp
                sudo mv /tmp/xwin-*/xwin /usr/local/bin/xwin
                sudo chmod +x /usr/local/bin/xwin
                rm -rf /tmp/xwin.tar.xz /tmp/xwin-*
          # Prepare cache dir and materialise the Win32 SDK sysroot
                mkdir -p ~/.xwin-cache
                xwin --accept-license --arch x86 \
                --sdk-version "${XWIN_SDK_VERSION}" \
                splat --output /opt/xwin --include-debug-libs
          else
                echo "/opt/xwin already present; skipping download."
          fi


      # ----- Build static libcurl for Win32 with llvm-rc (© → (c) patch) -----
      - name: Download and build libcurl (static)
        run: |
          set -e
          curl -L "https://github.com/curl/curl/releases/download/curl-7_76_1/curl-7.76.1.zip" -o curl.zip
          unzip -q curl.zip && rm curl.zip
          mv curl-7.76.1 curl-src

          # llvm-rc can't handle the © in VERSIONINFO; patch to (c)
          sed -i 's/©/(c)/g' curl-src/lib/libcurl.rc curl-src/src/curl.rc || true
          sed -i 's/\\xa9/(c)/g' curl-src/lib/libcurl.rc curl-src/src/curl.rc || true
          perl -0777 -pe 's/\xC2\xA9/(c)/g' -i curl-src/lib/libcurl.rc curl-src/src/curl.rc || true

          cmake -S curl-src -B curl-build -G Ninja \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_SYSROOT=/opt/xwin \
            -DCMAKE_FIND_ROOT_PATH=/opt/xwin \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_C_COMPILER_TARGET=i686-pc-windows-msvc \
            -DCMAKE_CXX_COMPILER_TARGET=i686-pc-windows-msvc \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_CURL_EXE=OFF \
            -DBUILD_TESTING=OFF
          cmake --build curl-build --parallel
          # Some CMake scripts expect libcurl_a.lib
          cp -f curl-build/lib/libcurl.lib curl-build/lib/libcurl_a.lib

      - name: Export curl paths
        run: |
          echo "CURL_INCLUDEDIR=$GITHUB_WORKSPACE/curl-src/include" >> $GITHUB_ENV
          echo "CURL_LIBRARYDIR=$GITHUB_WORKSPACE/curl-build/lib"   >> $GITHUB_ENV

      # ----- Configure & build the project for Win32 -----
      - name: Configure Project (Win32 via xwin)
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_SYSROOT=/opt/xwin \
            -DCMAKE_FIND_ROOT_PATH=/opt/xwin \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_C_COMPILER_TARGET=i686-pc-windows-msvc \
            -DCMAKE_CXX_COMPILER_TARGET=i686-pc-windows-msvc \
            -DCMAKE_CXX_STANDARD=20 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF \
            -DCURL_INCLUDEDIR="${CURL_INCLUDEDIR}" \
            -DCURL_LIBRARYDIR="${CURL_LIBRARYDIR}" \
            -DBUILD_TESTING=ON \
            -DCMAKE_BUILD_TYPE=Release

      - name: Build Project
        run: cmake --build build --parallel

      - name: Ensure EuroScope shim next to test EXEs
        run: |
          if [ -f build/src/plugin/bin/EuroScopePlugInDll.dll ] && [ -d build/bin ]; then
            cp -f build/src/plugin/bin/EuroScopePlugInDll.dll build/bin/ || true
          fi

      # Upload full build tree (for Windows ctest)
      - name: Upload Cross Build Tree
        uses: actions/upload-artifact@v4
        with:
          name: ukcp-build-tree-cross-xwin
          path: build

      # Also upload the three DLLs individually for release job convenience
      - name: Prepare flat DLL dist
        run: |
          mkdir -p out-dist
          find build -type f -name "UKControllerPlugin*.dll" -exec cp -f {} out-dist/ \; || true

      - name: Upload Core DLL
        if: ${{ hashFiles('out-dist/UKControllerPluginCore.dll') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: UKControllerPluginCore.dll
          path: out-dist/UKControllerPluginCore.dll

      - name: Upload Updater DLL
        if: ${{ hashFiles('out-dist/UKControllerPluginUpdater.dll') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: UKControllerPluginUpdater.dll
          path: out-dist/UKControllerPluginUpdater.dll

      - name: Upload Loader DLL
        if: ${{ hashFiles('out-dist/UKControllerPlugin.dll') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: UKControllerPlugin.dll
          path: out-dist/UKControllerPlugin.dll

  # ----------- WINDOWS TESTS (run ctest on cross-built tree) -----------
  windows-cross-tests:
    name: Windows Tests (Cross-Built)
    runs-on: windows-2025
    needs: [ linux-cross ]
    steps:
      - name: Install VC++ 2010 Redistributables
        run: |
          choco install vcredist2010 --yes
          choco install vcredist2010 --x86 --yes

      - name: Download Cross Build Tree
        uses: actions/download-artifact@v4
        with:
          name: ukcp-build-tree-cross-xwin
          path: build

      - name: Run Tests (ctest)
        working-directory: build
        run: ctest --output-on-failure --no-tests=error

  # ----------- FORMAT (unchanged from your flow) -----------
  format:
    name: Format
    runs-on: windows-latest
    concurrency:
      group: ukcp-format-${{ github.ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check Clang Version
        run: clang-cl --version

      - name: Get All Changed Files
        id: changed-files
        uses: Ana06/get-changed-files@v2.3.0
        with:
          filter: |
            src/**/*.cpp
            src/**/*.h
            test/**/*.cpp
            test/**/*.h

      - name: Clang Format
        run: |
          if (-not ([string]::IsNullOrEmpty("${{ steps.changed-files.outputs.added_modified }}"))) {
            clang-format --style=file --dry-run -Werror ${{ steps.changed-files.outputs.added_modified }}
          }

  # ----------- RELEASE -----------
  release:
    name: Release
    runs-on: windows-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/alpha')
    needs: [ linux-cross, windows-cross-tests, format ]
    concurrency:
      group: ukcp-release
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # Node/Yarn cache (same pattern you used)
      - name: Setup Yarn
        uses: actions/setup-node@v4
        with:
          node-version: "16"

      - name: Get Yarn Cache Directory
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Load Yarn Cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Load Cached Node Modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Assets
        run: yarn

      # Download build artifacts (produced by linux-cross above)
      - name: Download Core Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPluginCore.dll
          path: ".\\build\\bin\\UKControllerPluginCore.dll"

      - name: Download Updater Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPluginUpdater.dll
          path: ".\\build\\bin\\UKControllerPluginUpdater.dll"

      - name: Download Loader Binary
        uses: actions/download-artifact@v4
        with:
          name: UKControllerPlugin.dll
          path: ".\\build\\bin\\UKControllerPlugin.dll"

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          yarn semantic-release
